{
  "name": "MCNV-tutorial",
  "tagline": "Tutorial for using the MCNV package",
  "body": "#Introduction to the MCNV Package\r\n\r\n##Prerequisites\r\nBefore using the MCNV software, there are some things you need:\r\n\r\n1. An understanding of [R](https://www.r-project.org) and [Bioconductor](http://bioconductor.org);\r\n2. A working copy of both [R](https://www.r-project.org) and [Bioconductor](http://bioconductor.org/install/);\r\n3. Access to the MCNV data on xserve (at `GED/GED-MCNV`).\r\n\r\n###Installation\r\nBefore you can use the `MCNV` package, it must be installed. MCNV depends on several other packages, so you need to install them first. You also need to get a copy of the MCNV package. These are stored in the `GED-MCNV/package` folder. Get a local copy of the laters version, which will be named `mcnv_1.5-18.tar.gz` (for version 1.5-18). Do not uncompress the file; keep it as a compressed archive. Note that many web browsers will attempt to \"open\" known file types, and might decompress the file. Once you have a local copy of the MCNV package in the current directory, you can install it:\r\n\r\n~~~r\r\nsource(\"https://bioconductor.org/biocLite.R\")\r\nbiocLite(c(\"GenomicRanges\", \"DNAcopy\", \"ggplot2\", \"SummarizedExperiment\", \"S4Vectors\", \"GenomeInfoDb\", \"parallel\", \"GenomeInfoDb\"))\r\ninstall.packages('./mcnv_1.5-18.tar.gz', repos=NULL)\r\n~~~\r\n\r\n###Testing\r\nYou can test if the MCNV package is correctly installed by:\r\n\r\n~~~r\r\nlibrary(mcnv)\r\ndata(counts)\r\ndata(segments)\r\np <- plotMCNVSample(counts, segments=segments, sample=\"CTTE0783134B32D11E381403C07545108A8\")\r\nplot(p)\r\n~~~\r\n\r\nThe results should look like this:\r\n\r\n![Example MCNV Plot](./images/example-plot.png)\r\n\r\nIf you do not get an output plot that looks like the above, check the error messages that R has returned.\r\n\r\n##Window Counts\r\nThe basic data object used for the MCNV is the `mcnvWindowCounts` object. This is based upon the [SummarizedExperiment](http://www.bioconductor.org/packages/release/bioc/html/SummarizedExperiment.html) class. This object holds data for each window for multiple samples. Each *row* in the dataset corresponds to a single window, and each column a single sample.\r\n\r\nThe `counts` dataset which is included in the MCNV pakage is an example of the `mcnvWindowCounts` object. Load it as:\r\n\r\n~~~r\r\ndata(counts)\r\n~~~\r\n\r\n###Windows\r\nThe windows contained within the `counts` object can be extracted using the `windows()` function. Look at [GenomicRanges](http://www.bioconductor.org/packages/release/bioc/vignettes/GenomicRanges/inst/doc/GenomicRangesIntroduction.pdf) documentation for the underlying GRanges class. The resulting window object can be treated as a `data.frame`, but has many useful features. Most usefully, you can get intersections between a genomic range and a set of windows using `subsetByOverlaps`:\r\n\r\n~~~r\r\ndata(counts)\r\nw <- windows(counts) # Extract the windows\r\nlength(w) # How many windows are there?\r\nrange(w) # The complete range covered by the windows\r\nseqnames(w) # The sequence names (i.e. the chromosomes)\r\nstart(w) # The start positions of the windows\r\nend(w) # The end positions\r\n\r\n# Subset the windows by a range:\r\ndata(genome)\r\nr <- intervalRange(\"chr9:21000000-22000000\", genome=genome)\r\nsubsetByOverlaps(w, r)\r\n~~~\r\n\r\nNote that you don't need to extract the windows from `counts` in order to do this subsetting:\r\n\r\n~~~r\r\ndata(counts)\r\ndata(genome)\r\nr <- intervalRange(\"chr9:21000000-22000000\", genome=genome)\r\nsubsetCounts(counts, r)\r\n~~~\r\n\r\nEach window contains multiple values, including the type, mappability, and the number of A, C, G, T and N bases. You can extract these as a DataFrame using `rowData(counts)`.\r\n\r\n###Samples\r\nThe sample data contined in the `counts` object can be accessed as `colData(counts)`. The returned object is a DataFrame continaing the sample metadata:\r\n\r\n~~~r\r\ndata(counts)\r\nd <- colData(counts)\r\nd\r\nd$group\r\nd$flowcell\r\n~~~\r\n\r\n###Sample Data\r\nThe `counts` object contains multiple datasets, for each sample and each window. You can see which datasets are included using `assays(counts)`. The datasets are:\r\n\r\n* `rawCounts` containing the raw read counts per window;\r\n* `correctedCounts` containing the corrected log read counts per window; and\r\n* `smoothedCOunts` containing the smoothed corrected counts per window (Don't use these).\r\n\r\nYou can extract these easily:\r\n\r\n~~~r\r\ndata(counts)\r\nr <- rawCounts(counts)\r\nd <- correctedCounts(counts)\r\n~~~\r\n\r\n##Segments\r\nCorrected data contained within the counts object are stored as a GRangesList. See the [GenomicRanges](http://www.bioconductor.org/packages/release/bioc/vignettes/GenomicRanges/inst/doc/GenomicRangesIntroduction.pdf) documentation for more information. Each sample is stored as a separate GRanges dataset, as segments are in different locations per sample, so can't be made into regular matrix-like objects.\r\n\r\nSubsetting a single GRanges object is as described for windows, but to subset the whole of a segments dataset, you can use the `subsetSegments()` function:\r\n\r\n~~~r\r\ndata(segments)\r\ndata(genome)\r\nr <- intervalRange(\"chr9:21000000-22000000\", genome=genome)\r\nsubsetSegments(segments, r)\r\n~~~\r\n\r\n##Plotting\r\nThe base plotting function is `plotMCNVSample`. This function produces an individual plot for a single sample:\r\n\r\n~~~r\r\ndata(counts)\r\ndata(segments)\r\ndata(genome)\r\nr <- intervalRange(\"chr9:21000000-24000000\", genome=genome)\r\np <- plotMCNVSample(counts, segments=segments, sample=\"CTTE0783134B32D11E381403C07545108A8\", region=r)\r\nplot(p)\r\n~~~\r\n\r\nMultiple options can be specified, including background annotations.  For example, to include the position of *CDKN2A* as a coloured bar behind the points, the following code can be used:\r\n\r\n~~~r\r\n# Build the annotation for CDKN2A & CDKN2B:\r\nannot <- intervalRange(c(\"chr9:21966929-21967751\", \"chr9:22002903-22009313\"), genome=genome)\r\nannot$colour <- NA # Don't show a rectangle round the box\r\nannot$fill <- c(\"navy\", \"orange\") # The colours for the annotation boxes\r\nannot$alpha <- 0.001 # Make the boxes transparent\r\n\r\n# Plot the data:\r\nregion <- intervalRange(\"chr9:21900000-22100000\", genome=genome)\r\np <- plotMCNVSample(counts, segments=segments, sample=\"CTTE0783134B32D11E381403C07545108A8\", annotation=annot, region=region, segment.colour='black')\r\nplot(p)\r\n~~~\r\n\r\nThe `counts` and `segments` objects only show data for the 4Mb *CDKN2A* region. The complete data are in the `GED/GED-MCNV/data/corrected/` and `GED/GED-MCNV/data/segmented/` folders. You can load these directly into R using `load()`. After this, whole genome plots are simple:\r\n\r\n~~~r\r\n# Load the 10 data (NB: You'll need the correct path here):\r\nload('GED-MCNV/data/corrected/counts-10k.RData')\r\nload('GED-MCNV/data/segmented/segments-10k.RData')\r\n\r\n# Plot the complete genome for one sample:\r\np <- plotMCNVSample(counts10k, segments=segments10k.corrected, sample=\"CTTE0783134B32D11E381403C07545108A8\", segment.colour=\"black\")\r\nplot(p)\r\n\r\n# Plot just chromosome 9:\r\np <- plotMCNVSample(counts10k, segments=segments10k.corrected, sample=\"CTTE0783134B32D11E381403C07545108A8\", segment.colour=\"black\", region=intervalRange(\"chr9\", genome=genome))\r\nplot(p)\r\n~~~\r\n",
  "note": "Don't delete this file! It's used internally to help with page regeneration."
}